/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ModalWon {
        /**
          * Время анимации в миллисекундах
          * @default 300
         */
        "animationDuration": number;
        /**
          * Соотношение сторон
         */
        "aspectRatio"?: string;
        /**
          * Путь к фоновому изображению модального окна (опционально)
         */
        "backgroundImage"?: string;
        /**
          * Путь к изображению кнопки (опционально)
         */
        "buttonImage"?: string;
        /**
          * Текст кнопки
          * @default 'CLAIM BONUS'
         */
        "buttonText": string;
        /**
          * Включить/выключить возможность закрытия по клику на оверлей
          * @default true
         */
        "closeOnOverlayClick": boolean;
        /**
          * CSS переменные для стилизации
         */
        "cssVariables"?: {
    modalContentBg?: string;
    modalContentRadius?: string;
    modalButtonBg?: string;
    modalButtonRadius?: string;
  };
        /**
          * CSS класс для дополнительной стилизации модального окна
          * @default ''
         */
        "customClass": string;
        /**
          * Определяет, открыто ли модальное окно
         */
        "isOpen": boolean;
        /**
          * Высота модального окна
         */
        "modalHeight"?: string;
        /**
          * Ширина модального окна
         */
        "modalWidth"?: string;
        /**
          * Ссылка для кнопки действия
          * @default '#'
         */
        "offerLink": string;
        /**
          * Заголовок модального окна
          * @default 'YOU WON'
         */
        "titleText": string;
        /**
          * Сумма выигрыша для отображения
          * @default '0'
         */
        "winAmount": string;
    }
}
export interface ModalWonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLModalWonElement;
}
declare global {
    interface HTMLModalWonElementEventMap {
        "close": any;
    }
    interface HTMLModalWonElement extends Components.ModalWon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLModalWonElementEventMap>(type: K, listener: (this: HTMLModalWonElement, ev: ModalWonCustomEvent<HTMLModalWonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLModalWonElementEventMap>(type: K, listener: (this: HTMLModalWonElement, ev: ModalWonCustomEvent<HTMLModalWonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLModalWonElement: {
        prototype: HTMLModalWonElement;
        new (): HTMLModalWonElement;
    };
    interface HTMLElementTagNameMap {
        "modal-won": HTMLModalWonElement;
    }
}
declare namespace LocalJSX {
    interface ModalWon {
        /**
          * Время анимации в миллисекундах
          * @default 300
         */
        "animationDuration"?: number;
        /**
          * Соотношение сторон
         */
        "aspectRatio"?: string;
        /**
          * Путь к фоновому изображению модального окна (опционально)
         */
        "backgroundImage"?: string;
        /**
          * Путь к изображению кнопки (опционально)
         */
        "buttonImage"?: string;
        /**
          * Текст кнопки
          * @default 'CLAIM BONUS'
         */
        "buttonText"?: string;
        /**
          * Включить/выключить возможность закрытия по клику на оверлей
          * @default true
         */
        "closeOnOverlayClick"?: boolean;
        /**
          * CSS переменные для стилизации
         */
        "cssVariables"?: {
    modalContentBg?: string;
    modalContentRadius?: string;
    modalButtonBg?: string;
    modalButtonRadius?: string;
  };
        /**
          * CSS класс для дополнительной стилизации модального окна
          * @default ''
         */
        "customClass"?: string;
        /**
          * Определяет, открыто ли модальное окно
         */
        "isOpen"?: boolean;
        /**
          * Высота модального окна
         */
        "modalHeight"?: string;
        /**
          * Ширина модального окна
         */
        "modalWidth"?: string;
        /**
          * Ссылка для кнопки действия
          * @default '#'
         */
        "offerLink"?: string;
        /**
          * Событие закрытия модального окна
         */
        "onClose"?: (event: ModalWonCustomEvent<any>) => void;
        /**
          * Заголовок модального окна
          * @default 'YOU WON'
         */
        "titleText"?: string;
        /**
          * Сумма выигрыша для отображения
          * @default '0'
         */
        "winAmount"?: string;
    }
    interface IntrinsicElements {
        "modal-won": ModalWon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "modal-won": LocalJSX.ModalWon & JSXBase.HTMLAttributes<HTMLModalWonElement>;
        }
    }
}
